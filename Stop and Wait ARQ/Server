// stop_and_wait_server.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>

typedef struct packet {
    char data[1024];
} Packet;

typedef struct frame {
    int frame_kind;  // 1 = data, 0 = ACK
    int sq_no;
    int ack;
    Packet packet;
} Frame;

int main(int argc, char** argv) {
    if (argc != 2) {
        printf("Usage: %s <port>\n", argv[0]);
        exit(0);
    }

    int port = atoi(argv[1]);
    int sockfd;
    struct sockaddr_in serverAddr, clientAddr;
    Frame frame_recv, frame_send;
    socklen_t addr_size;
    int expected_frame_id = 0;

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    memset(&serverAddr, '\0', sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(port);
    serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");

    bind(sockfd, (struct sockaddr*)&serverAddr, sizeof(serverAddr));
    addr_size = sizeof(clientAddr);

    while (1) {
        int recv_len = recvfrom(sockfd, &frame_recv, sizeof(Frame), 0, (struct sockaddr*)&clientAddr, &addr_size);

        if (recv_len > 0 && frame_recv.frame_kind == 1) {
            if (frame_recv.sq_no == expected_frame_id) {
                printf("[+] Frame received: %s\n", frame_recv.packet.data);
                frame_send.frame_kind = 0;
                frame_send.sq_no = 0;
                frame_send.ack = expected_frame_id + 1;
                sendto(sockfd, &frame_send, sizeof(Frame), 0, (struct sockaddr*)&clientAddr, addr_size);
                printf("[+] ACK sent for seq_no=%d\n\n", expected_frame_id);
                expected_frame_id = (expected_frame_id + 1) % 2;
            } else {
                // Duplicate or out-of-order frame received â€” resend last ACK
                printf("[!] Duplicate frame received. Resending last ACK for seq_no=%d\n\n", (expected_frame_id + 1) % 2);
                frame_send.frame_kind = 0;
                frame_send.sq_no = 0;
                frame_send.ack = expected_frame_id;
                sendto(sockfd, &frame_send, sizeof(Frame), 0, (struct sockaddr*)&clientAddr, addr_size);
            }
        }
    }

    close(sockfd);
    return 0;
}
