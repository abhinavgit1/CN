// stop_and_wait_client.c
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <sys/socket.h>
#include <sys/time.h>

typedef struct packet {
    char data[1024];
} Packet;

typedef struct frame {
    int frame_kind;  // 1 = data
    int sq_no;       // 0 or 1
    int ack;         // not used in client
    Packet packet;
} Frame;

int main(int argc, char* argv[]) {
    if (argc != 2) {
        printf("Usage: %s <port>\n", argv[0]);
        exit(0);
    }

    int port = atoi(argv[1]);
    int sockfd;
    struct sockaddr_in serverAddr;
    Frame frame_send, frame_recv;
    socklen_t addr_size;
    char buffer[1024];
    int frame_id = 0;
    int ack_recv;

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    memset(&serverAddr, '\0', sizeof(serverAddr));
    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(port);
    serverAddr.sin_addr.s_addr = inet_addr("127.0.0.1");

    addr_size = sizeof(serverAddr);

    while (1) {
        printf("Enter data to send: ");
        scanf("%s", buffer);

        frame_send.frame_kind = 1;
        frame_send.sq_no = frame_id;
        frame_send.ack = 0;
        strcpy(frame_send.packet.data, buffer);

        ack_recv = 0;

        while (!ack_recv) {
            // Send the frame
            sendto(sockfd, &frame_send, sizeof(Frame), 0, (struct sockaddr*)&serverAddr, addr_size);
            printf("[+] Frame with seq_no=%d sent: %s\n", frame_send.sq_no, buffer);

            // Set timeout using select
            struct timeval tv;
            fd_set readfds;
            FD_ZERO(&readfds);
            FD_SET(sockfd, &readfds);
            tv.tv_sec = 3;  // wait for 3 seconds
            tv.tv_usec = 0;

            int retval = select(sockfd + 1, &readfds, NULL, NULL, &tv);

            if (retval > 0) {
                int recv_len = recvfrom(sockfd, &frame_recv, sizeof(Frame), 0, NULL, NULL);
                if (recv_len > 0 && frame_recv.sq_no == 0 && frame_recv.ack == frame_id + 1) {
                    printf("[+] ACK received for seq_no=%d\n\n", frame_id);
                    ack_recv = 1;
                } else {
                    printf("[!] Invalid ACK received, retransmitting...\n");
                }
            } else {
                printf("[!] ACK not received, timeout. Resending frame...\n");
            }
        }

        frame_id = (frame_id + 1) % 2;  // Toggle between 0 and 1
    }

    close(sockfd);
    return 0;
}
